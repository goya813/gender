#coding: utf-8

import hmac, sha;
import urllib, urllib2;
import random;
import time;
import hashlib;
import string;
import cgi;

consumer_key = "VkywqJlbLbNvNyY2EN1Fg";
consumer_secret = "F2NHcWZD6cfjm5WhjfWGYsb0jJiQPVfIHYkmcxp9v48";
access_token = "1243783164-sDkGtaokxh50qPWfYNa4IKfCeKWwdEph5quVgpc";
access_token_secret = "mbSi9Q1CMmQb7TeTo32NAiKaCAilwHTTxCS84mI";
#url = "https://api.twitter.com/oauth/request_token";
method = "GET";

class twitter_api(object):

	def __init__(self, ckey, csecret, atoken, asecret):
		self.oauth = oauth_authorize(ckey, csecret, atoken, asecret);
		
		self.ckey = ckey;
		self.csecret = csecret;
		self.atoken = atoken;
		self.asecret = asecret;
	
	def tweet(self, tweet_str):
		url = "https://api.twitter.com/1/statuses/update.json";

		header_param = self.oauth.get_initparam();
		header_param["status"] = tweet_str;
		
		sig = self.oauth.oauth_signature(url, "POST", header_param);

		del header_param["status"];
		#param = self.oauth.get_initparam();
		#param["status"] = tweet_str;

		header = self.oauth.oauth_header(url, "POST", header_param, sig);

		param = {};
		param["status"] = tweet_str;
		encode_param = urllib.urlencode(param);
		print encode_param;
		print url;
		req = urllib2.Request(url, encode_param);
		req.add_header("Authorization", header);
		res = urllib2.urlopen(req);

		info = res.read();
		print info;

	def user_timeline(self, screen_name):
		url = "https://api.twitter.com/1/statuses/user_timeline.json?screen_name=%s" % screen_name;
		
		oauth = oauth_authorize(self.ckey, self.csecret, self.atoken, self.asecret);

		param = oauth.get_initparam();
		header = oauth.oauth_header(url, "GET", param);

		req = urllib2.Request(url);
		req.add_header("Authorization", header);
		res = urllib2.urlopen(req);

		print res.read();

class oauth_authorize(object):
	
	def __init__(self, ckey, csecret, token = "", tsecret = "",
				 site = "http://api.twitter.com/"):

		self.req_token_url =  site + "oauth/request_token";
		self.authorize_url = site + "oauth/authorize";
		self.access_url = site + "oauth/access_token";

		self.ckey = ckey;
		self.csecret = csecret;

		self.token = token;
		self.tsecret = tsecret;

		self.debug_flag = 1;

	def oauth_token(self):

		param = self.get_initparam();
		del param["oauth_token"];
		
		if (self.debug_flag == 1):
			print "param keys";
			for key in param:
				print key;

		oauth_header = self.oauth_header(self.req_token_url, "GET", param);
		
		print "header:" + oauth_header;

		req = urllib2.Request(self.req_token_url);
		req.add_header("Authorization", oauth_header);
		res = urllib2.urlopen(req);

		parse_res = cgi.parse_qs(res.read());

		print parse_res;
		token_info = {};
		token_info["oauth_token"] = parse_res["oauth_token"];
		token_info["oauth_token_secret"] = parse_res["oauth_token_secret"];

		return (token_info);
	
	def access_token(self, token_info, pin):
		
		param = self.get_initparam();
		param["oauth_verifier"] = pin;

		header = self.oauth_header(self.access_url, "GET", param);

		req = urllib2.Request(self.access_url);
		req.add_header("Authorization", header);
		res = urllib2.urlopen(req);

		parse_res = cgi.parse_qs(res.read());

		print parse_res;

		return (parse_res);

	def oauth_signature(self, url, method, param = {}):
		if (self.debug_flag == 1):
			print "start get_sigunature";
			print "%s&%s" % (self.csecret, self.tsecret);

		param_list = [];
		for key, value in sorted(param.items()):
			param_list.append("%s=%s" % (key, value));
		
		param_str = "&".join(param_list);
		msg = "%s&%s&%s" % (method, self.my_quote(url), self.my_quote(param_str));
		
		if (self.debug_flag == 1):
			print "msg:" + msg;

		h = hmac.new("%s&%s" % (self.csecret, self.tsecret), msg, hashlib.sha1);
		sig = h.digest().encode("base64").strip();
		
		return (sig);

	def oauth_header(self, url, method, param, sig = None):
		
		if (sig == None):
			sig = self.oauth_signature(url, method, param);

		param["oauth_signature"] = sig;

		plist = [];
		for key, value in param.iteritems():
			plist.append('%s="%s"' % (self.my_quote(key), self.my_quote(value)));

		header = 'OAuth realm="",%s' % (",".join(plist));

		if (self.debug_flag == 1):
			print "header:" + header;

		return (header);

	def my_quote(self, _str):
		return (urllib.quote(str(_str), "-._~"));

	def random_str(self, n):
		randchars = string.digits + string.letters;
		return (''.join(random.choice(randchars) for i in xrange(n)));

	def get_initparam(self, token = None):
		if (token == None):
			token = self.token;

		oauth_param = {};
		oauth_param["oauth_consumer_key"] = self.ckey;
		oauth_param["oauth_signature_method"] = "HMAC-SHA1";
		oauth_param["oauth_nonce"] = str(self.random_str(42));
		oauth_param["oauth_timestamp"] = str(int(time.time()));
		oauth_param["oauth_version"] = "1.0";
		oauth_param["oauth_token"] = token;

		return (oauth_param);

#twitter = oauth_authorize(consumer_key, consumer_secret);
#token = twitter.oauth_token();

#print token;

#pin = raw_input('pin=');
#twitter = oauth_authorize(consumer_key, consumer_secret, token["oauth_token"][0], token["oauth_token_secret"][0]);
#twitter.access_token(token, pin);

twitter = twitter_api(consumer_key, consumer_secret, access_token, access_token_secret);
twitter.tweet(urllib.quote("uio", ""));
#twitter.user_timeline("goya813");
